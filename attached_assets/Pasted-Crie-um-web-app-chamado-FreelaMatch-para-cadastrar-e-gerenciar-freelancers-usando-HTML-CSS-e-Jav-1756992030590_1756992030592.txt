Crie um web app chamado ‚ÄúFreelaMatch‚Äù para cadastrar e gerenciar freelancers, usando HTML, CSS e JavaScript (fetch) no frontend e Airtable como backend.
O app deve implementar Create + Read + Delete (obrigat√≥rio) e Update (PATCH) como b√¥nus, com proxy para seguran√ßa dos segredos.

1) Arquitetura & Stack

Projeto com frontend (HTML/CSS/JS puro) e servidor Node/Express atuando como proxy seguro para a API do Airtable.

O servidor deve expor rotas REST:

GET /api/freelancers (listar)

POST /api/freelancers (criar)

PATCH /api/freelancers/:id (editar ‚Äì b√¥nus)

DELETE /api/freelancers/:id (excluir)

O frontend √© servido pela pasta p√∫blica e consome somente as rotas /api/* (nunca chama o Airtable direto).

2) Dados (Airtable)

Base: FreelaMatch (ou DBX_FreelaMatch)

Tabela: Freelancers

Campos (use exatamente esses nomes min√∫sculos):

nome (string, obrigat√≥rio)

servico (string, obrigat√≥rio ‚Äì ex.: Design, Programa√ß√£o, Marketing)

email (string, validar formato)

preco_hora (number)

localizacao (string curta, ex.: ‚ÄúCuritiba ‚Äì PR‚Äù)

foto (string ‚Äì URL opcional)

No proxy, normalizar os registros do Airtable para { id, nome, servico, email, preco_hora, localizacao, foto }.

3) Seguran√ßa (Replit Secrets)

N√ÉO deixar token no frontend.

Ler as vari√°veis somente no servidor:

AIRTABLE_TOKEN ‚Üí PAT do Airtable

AIRTABLE_BASE_ID ‚Üí ID da base

AIRTABLE_TABLE ‚Üí Freelancers

Enviar ao Airtable com headers:

Authorization: Bearer ${AIRTABLE_TOKEN}

Content-Type: application/json

4) Regras das Rotas do Proxy

GET /api/freelancers

Chamar GET https://api.airtable.com/v0/${BASE_ID}/${TABLE}

Suportar pageSize=50 por padr√£o, ordenar por createdTime desc.

Responder { ok:true, list:[‚Ä¶], offset? }.

POST /api/freelancers

Recebe { nome, servico, email, preco_hora, localizacao, foto }.

Validar nome e servico.

Criar no Airtable e devolver { ok:true, item }.

PATCH /api/freelancers/:id (b√¥nus)

Atualiza apenas os campos enviados. Devolver { ok:true, item }.

DELETE /api/freelancers/:id

Excluir pelo id. Devolver { ok:true, deleted:id }.

Tratar erros com { ok:false, error:"mensagem" } e status HTTP adequados.

5) UI/UX (Frontend)

Tema: fundo off-white #FAFAF7, cart√µes brancos, gradiente p√¥r-do-sol nos destaques (laranja ‚Üí √¢mbar ‚Üí dourado).

Header: t√≠tulo ‚ÄúFreelaMatch ‚Äì Conecte-se com freelancers‚Äù + subt√≠tulo curto.

Formul√°rio (Create): campos citados acima; valida√ß√£o m√≠nima; ao enviar, criar e atualizar lista sem recarregar; limpar e focar no primeiro campo.

Lista (Read): renderizar cards responsivos (grid), cada card com:

Foto (ou placeholder), nome, servi√ßo (badge), email (mailto), localiza√ß√£o, pre√ßo/hora (BRL).

Bot√µes: Editar (üñäÔ∏è ‚Äì abre modal, salva via PATCH) e Excluir (üóëÔ∏è ‚Äì abre modal, confirma e chama DELETE).

Estados visuais:

Carregando: spinner/skeleton;

Vazio: mensagem ‚ÄúNenhum freelancer cadastrado ainda.‚Äù;

Erro: toast/banner vermelho com mensagem da API.

Acessibilidade & UX: foco vis√≠vel, bot√µes com hover, modais com Esc e clique-fora para fechar, feedbacks de sucesso/erro.

Microintera√ß√µes: hover nos cards (eleva√ß√£o + borda Sunset), bot√µes principais com glow suave.

6) Organiza√ß√£o do Frontend

Estado local: array freelancers como fonte da verdade.

Re-renderizar sempre a partir do estado.

Fun√ß√µes claras:

loadFreelancers() (GET)

submitCreate() (POST)

openEdit(item) / submitEdit(id) (PATCH ‚Äì b√¥nus)

confirmDelete(id) / doDelete(id) (DELETE)

renderFreelancers(list) + utilit√°rios (moneyBRL, showLoading, showError, showEmpty, openModal/closeModal)

7) Crit√©rios de Aceita√ß√£o (checklist do professor)

‚úÖ Read (GET) lista da nuvem exibida em cards.

‚úÖ Create (POST) via formul√°rio com valida√ß√£o.

‚úÖ Delete (DELETE) por item com confirma√ß√£o no modal (n√£o usar confirm nativo).

‚úÖ Estados: carregando / erro / vazio.

‚úÖ C√≥digo organizado (fun√ß√µes, coment√°rios curtos).

‚úÖ Seguran√ßa: token em Secrets e uso somente no servidor (proxy).

‚≠ê B√¥nus: Update (PATCH) em modal, busca por nome/servi√ßo e/ou pagina√ß√£o (pageSize).

8) Publica√ß√£o & README

Incluir um README com:

Vari√°veis de ambiente necess√°rias (AIRTABLE_TOKEN, AIRTABLE_BASE_ID, AIRTABLE_TABLE).

Como rodar no Replit (rodar o servidor e acessar a URL p√∫blica).

Diagrama de sequ√™ncia simples:
‚ÄúUsu√°rio ‚Üí Front (fetch /api) ‚Üí Proxy Express ‚Üí API Airtable ‚Üí Resposta JSON ‚Üí Render DOM‚Äù.

Nota sobre seguran√ßa: token fica no servidor; se algum dia usar s√≥ frontend, documentar os riscos e limitar escopo do PAT.